import threading

"""
# السلاسل المتعددة !!

تعدد السلاسل:
نحن نستخدم threading لتشغيل روابط متعددة (مهام ، استدعاء دوال) في نفس الوقت.
هذا يعني أن برنامجك سيشغل شيئين في نفس الوقت.

Thread: هو عملية خفيفة الوزن لا تتطلب الكثير من الذاكرة.

عملية:
يمكن أن تحتوي العملية على أكثر من Thread واحد.

على سبيل المثال:
تبدأ أي لعبة على جهازك ستكون هذه اللعبة هي المشغل الرئيسي وفي تلك اللعبة
أشياء كثيرة داخلها مثل الدردشة العامة، حالة الأصدقاء (متصل أو غير متصل) 
أي عرض للأحداث يتم تحديثها كل ثانية و يتم تشغيلها بشكل منفصل في (thread) خاصة بهم.

فوائد threading:
يظل البرنامج مستجيبًا.
المسؤول عن التحريك البصري داخل التطبيق.

يتم إجراء السلاسل المتعددة في Python بواسطة الوحدة threading.

لنقم ببعض الامثلة ...
"""

# استيراد ال Thread
import threading

# temp function
def a(name):
	for i in range(100):
		print( threading.current_thread().name)
		print("اسمي هو : " + name)



# t1 = threading.Thread(target=a, args=("خيط 1", ))
# t2 = threading.Thread(target=a, args=("خيط 2", ))

# t1.start()
# t2.start()


"""
Here is output of above program...

اسمي هو : خيط 1اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 2

اسمي هو : خيط 1
اسمي هو : خيط 1
اسمي هو : خيط 1
اسمي هو : خيط 1
اسمي هو : خيط 1
اسمي هو : خيط 1

As you can see they are running at the sane time but not in  any manner.

How to deal with it?

>> join() method..
"""


t1 = threading.Thread(target=a, args=("خيط 1", ), name="خيطي >> t1")
t2 = threading.Thread(target=a, args=("خيط 2", ), name="خيطي >> t2")

t1.start()
t2.start()
t1.join()
t2.join()



"""
اسمي هو : خيط 1
اسمي هو : خيط 1
اسمي هو : خيط 1
اسمي هو : خيط 1
اسمي هو : خيط 1
اسمي هو : خيط 1
اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 1اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 1
اسمي هو : خيط 1
اسمي هو : خيط 1

اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 2
اسمي هو : خيط 2

عندما نضيف الدالة .join ()
، سيتم تشغيل الخيط الثاني فقط عندما يكون الخيط الأول قد
أكمل تنفيذه.
قد تختلف النتيجة حسب CPU 
الخاص بك...
"""

# The threadin module: 
	# >>>> threading.activeCount() يظهر عدد الخيوط النشطة
	# >>>> threading.currentThread() يظهر عدد الخيوط الموجدة عند التشغيل
	# >>>> threading.enumerate() يظهر قائمة بكافة كائنات الخيوط او السلاسل النشطة.

# Thread methods:
	# >>>> run() هذا يمثل نقطة دخول الخيط
	# >>>> start() يؤدي هذا إلى بدء تنفيذ مؤشر الترابط عن طريق استدعاء الدالة run()
	# >>>> join()  أنتظار انتهاء الخيط ...
	# >>>> is_alive() التحقق مما إذا كان الخيط لا يزال نشطًا أم لا
	# >>>> name   إرجاع اسم thread.

	